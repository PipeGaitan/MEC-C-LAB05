
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;


public class Grafica extends javax.swing.JFrame {

   List<LectorCsv> lectores = new ArrayList<>();
  
   public Grafica() {
        initComponents();
    }
   private void cargarDatos() {
        // Ruta del archivo CSV
       
    String csvFile = "Archivo.csv";
    String line = "";
    String cvsSplitBy = ";";

    try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
        while ((line = br.readLine()) != null) {
            String[] data = line.split(cvsSplitBy);
            LectorCsv newLector = new LectorCsv();
            newLector.setCodigo(data[1]);
            newLector.setGrupoEdad(data[3]);
            newLector.setNivelAcademico(data[7]);
            newLector.setGenero(data[9]);
            lectores.add(newLector);
        }
    } catch (IOException e) {
        e.printStackTrace();
    
        }}
   
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbuttoncargar = new javax.swing.JButton();
        filtro1 = new javax.swing.JTextField();
        Generar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        Barras = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbuttoncargar.setText("Cargar Archivo");
        jbuttoncargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbuttoncargarActionPerformed(evt);
            }
        });

        Generar.setText("Torta");
        Generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarActionPerformed(evt);
            }
        });

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Pais", "Genero", "Nivel Academico", "Grupo edad" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList2);

        jLabel1.setText("Palabras clave de Busqueda");

        Barras.setText("Barras");
        Barras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BarrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 673, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 201, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbuttoncargar)
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(filtro1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Generar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Barras, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addContainerGap(355, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filtro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbuttoncargar))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Generar)
                    .addComponent(Barras)
                    .addComponent(jLabel1))
                .addGap(78, 78, 78)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbuttoncargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbuttoncargarActionPerformed
       cargarDatos();





   // TODO add your handling code here:
    }//GEN-LAST:event_jbuttoncargarActionPerformed

    private void GenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarActionPerformed
  String filtro = filtro1.getText();
int contadorPregrado = 0, contadorPostgrado = 0, contadorPrimaria = 0, contadorBachillerato = 0, contadorNoIndica = 0,contfem=0,contmas=0,contUSA=0,contESP=0,contECU=0,contCHL=0,contCAN=0,contARG=0,contAUS=0,contMEX=0,contFRA=0, contAdult=0, contAdultJ=0,n1=0,n2=0,n3=0,n4=0,n5=0,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15;

try {
    for (LectorCsv lector : lectores) {
        if (filtro.equalsIgnoreCase("nivel academico")) {
            switch (lector.getNivelAcademico().toUpperCase()) {
                case "PREGRADO":
                  n1=  contadorPregrado++;
                    break;
                case "POSTGRADO":
                   n2= contadorPostgrado++;
                    break;
                case "PRIMARIA":
                   n3= contadorPrimaria++;
                    break;
                case "BACHILLERATO":
                   n4= contadorBachillerato++;
                    break;
                case "NO INDICA":
                   n5= contadorNoIndica++;
                    break;
            }
    DefaultCategoryDataset datos=new DefaultCategoryDataset();
    datos.setValue(n1,"Nivel de estudio","Pregrado");
    datos.setValue(n2,"Nivel de estudio","Postgrado");
    datos.setValue(n3,"Nivel de estudio","Primaria");
    datos.setValue(n4,"Nivel de estudio","Bachillerato");
    datos.setValue(n5,"Nivel de estudio","no indica");

        }
        else if (filtro.equalsIgnoreCase("genero")){
        switch (lector.getGenero().toUpperCase()){
        case "MASCULINO":
                    contmas++;
                    break;
                case "FEMENINO":
                    contfem++;
                    break;
        
        }
        
        }
        else if(filtro.equalsIgnoreCase("pais")){
        switch (lector.getCodigo().toUpperCase()){
             case "USA":
                    contUSA++;
                    break;
                case "ESP":
                    contESP++;
                    break;
                case "ECU":
                    contECU++;
                    break;
                case "CHL":
                    contCHL++;
                    break;
                case "CAN":
                    contCAN++;
                    break;
                case "ARG":
                    contARG++;
                    break;
                case "AUS":
                    contAUS++;
                    break;
                case "MEX":
                    contMEX++;
                    break;
                case "FRA":
                    contFRA++;
                    break;
            }
        }
        else if (filtro.equalsIgnoreCase("Grupo Edad")){
        switch (lector.getGrupoEdad().toUpperCase()){
        case "ADULTO":
                    contAdult++;
                    break;
                case "ADULTO JOVEN":
                    contAdultJ++;
                    break;
        
        }
        
        }
        
    }
    DefaultPieDataset datos=new DefaultPieDataset();
if (filtro.equalsIgnoreCase("nivel academico")) {
    datos.setValue("Pregrado", contadorPregrado);
    datos.setValue("Postgrado", contadorPostgrado);
    datos.setValue("Primaria", contadorPrimaria);
    datos.setValue("Bachillerato", contadorBachillerato);
    datos.setValue("No indica", contadorNoIndica);
    JFreeChart grafico_circular =ChartFactory.createPieChart(
        "Nivel de estudio de colombianos en el exterior",
        datos,
        true,
        true,
        false
        );
       ChartPanel panel = new ChartPanel(grafico_circular);
       panel.setMouseWheelEnabled(true);
       panel.setPreferredSize(new Dimension(400,200));
       
       jPanel1.setLayout(new BorderLayout());
       jPanel1.add(panel,BorderLayout.NORTH);
       pack();
       repaint();
} else if (filtro.equalsIgnoreCase("genero")) {
    datos.setValue("Masculino", contmas);
    datos.setValue("Femenino", contfem);
    JFreeChart grafico_circular =ChartFactory.createPieChart(
        "Genero de colombianos en el exterior",
        datos,
        true,
        true,
        false
        );
       ChartPanel panel = new ChartPanel(grafico_circular);
       panel.setMouseWheelEnabled(true);
       panel.setPreferredSize(new Dimension(400,200));
       
       jPanel1.setLayout(new BorderLayout());
       jPanel1.add(panel,BorderLayout.NORTH);
       pack();
       repaint();
} else if (filtro.equalsIgnoreCase("pais")) {
    datos.setValue("USA", contUSA);
    datos.setValue("ESP", contESP);
    datos.setValue("ECU", contECU);
    datos.setValue("CHL", contCHL);
    datos.setValue("CAN", contCAN);
    datos.setValue("ARG", contARG);
    datos.setValue("AUS", contAUS);
    datos.setValue("MEX", contMEX);
    datos.setValue("FRA", contFRA);
    JFreeChart grafico_circular =ChartFactory.createPieChart(
        "Pais de residencia de los colombianos en el extrangero",
        datos,
        true,
        true,
        false
        );
       ChartPanel panel = new ChartPanel(grafico_circular);
       panel.setMouseWheelEnabled(true);
       panel.setPreferredSize(new Dimension(400,200));
       
       jPanel1.setLayout(new BorderLayout());
       jPanel1.add(panel,BorderLayout.NORTH);
       pack();
       repaint();
} else if (filtro.equalsIgnoreCase("Grupo Edad")) {
    datos.setValue("Adulto", contAdult);
    datos.setValue("Adulto joven", contAdultJ);
    JFreeChart grafico_circular =ChartFactory.createPieChart(
        "Rango de edad de los colombianos en el exterior ",
        datos,
        true,
        true,
        false
        );
       ChartPanel panel = new ChartPanel(grafico_circular);
       panel.setMouseWheelEnabled(true);
       panel.setPreferredSize(new Dimension(400,200));
       
       jPanel1.setLayout(new BorderLayout());
       jPanel1.add(panel,BorderLayout.NORTH);
       pack();
       repaint();
}


    // Mostrar los resultados
   if (filtro.equalsIgnoreCase("nivel academico")) {
        System.out.println("Colombianos con nivel de Pregrado: " + contadorPregrado);
        System.out.println("Colombianos con nivel Postgrado: " + contadorPostgrado);
        System.out.println("Colombianos con nivel Primaria: " + contadorPrimaria);
        System.out.println("Colmbianos con nivel Bachillerato: " + contadorBachillerato);
        System.out.println("Colmbianos que no especifican su nivel academico: " + contadorNoIndica);
        
             
    }
    if (filtro.equalsIgnoreCase("genero")) {
     System.out.println("Colombianos del genero masculino en el extrangero: " + contmas);
     System.out.println("Colombianos del genero femenino en el extrangero : " + contfem);
    }
    
     if (filtro.equalsIgnoreCase("pais")) {
     System.out.println("Personas colombianas que viven en Estados Unidos: " + contUSA);
     System.out.println("Personas colombianas que viven en España: " + contESP);
     System.out.println("Personas colombianas que viven en Ecuador: " + contECU);
     System.out.println("Personas colombianas que viven en Chile: " + contCHL);
     System.out.println("Personas colombianas que viven en Canada: " + contCAN);
     System.out.println("Personas colombianas que viven en Argentina: " + contARG);
     System.out.println("Personas colombianas que viven en Australia: " + contAUS);
     System.out.println("Personas colombianas que viven en Mexico: " + contMEX);
     System.out.println("Personas colombianas que viven en Francia: " + contFRA);
     }
    
     if (filtro.equalsIgnoreCase("Grupo Edad")) {
     System.out.println("Cantidad de colombianos Adultos en el extrangero: " + contAdult);
     System.out.println("Cantidad de colombianos Adultos jovenes en el extrangero: " + contAdultJ);
    } 
     
     
     
     
     
     
     
     
} catch (Exception e) {
    e.printStackTrace();
}
    
    }//GEN-LAST:event_GenerarActionPerformed

    private void BarrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BarrasActionPerformed
        String filtro = filtro1.getText();
int contadorPregrado = 0, contadorPostgrado = 0, contadorPrimaria = 0, contadorBachillerato = 0, contadorNoIndica = 0,contfem=0,contmas=0,contUSA=0,contESP=0,contECU=0,contCHL=0,contCAN=0,contARG=0,contAUS=0,contMEX=0,contFRA=0, contAdult=0, contAdultJ=0,n1=0,n2=0,n3=0,n4=0,n5=0,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15;

try {
    for (LectorCsv lector : lectores) {
        if (filtro.equalsIgnoreCase("nivel academico")) {
            switch (lector.getNivelAcademico().toUpperCase()) {
                case "PREGRADO":
                   n1= contadorPregrado++;
                    break;
                case "POSTGRADO":
                   n2= contadorPostgrado++;
                    break;
                case "PRIMARIA":
                   n3= contadorPrimaria++;
                    break;
                case "BACHILLERATO":
                   n4= contadorBachillerato++;
                    break;
                case "NO INDICA":
                   n5= contadorNoIndica++;
                    break;
            }
      
        }
        
        else if (filtro.equalsIgnoreCase("genero")){
        switch (lector.getGenero().toUpperCase()){
        case "MASCULINO":
                    contmas++;
                    break;
                case "FEMENINO":
                    contfem++;
                    break;
        
        }
        
        }
        else if(filtro.equalsIgnoreCase("pais")){
        switch (lector.getCodigo().toUpperCase()){
             case "USA":
                    contUSA++;
                    break;
                case "ESP":
                    contESP++;
                    break;
                case "ECU":
                    contECU++;
                    break;
                case "CHL":
                    contCHL++;
                    break;
                case "CAN":
                    contCAN++;
                    break;
                case "ARG":
                    contARG++;
                    break;
                case "AUS":
                    contAUS++;
                    break;
                case "MEX":
                    contMEX++;
                    break;
                case "FRA":
                    contFRA++;
                    break;
            }
        }
        else if (filtro.equalsIgnoreCase("Grupo Edad")){
        switch (lector.getGrupoEdad().toUpperCase()){
        case "ADULTO":
                    contAdult++;
                    break;
                case "ADULTO JOVEN":
                    contAdultJ++;
                    break;
        
        }
        
        }
        
    }
     DefaultCategoryDataset datos=new DefaultCategoryDataset();
if (filtro.equalsIgnoreCase("nivel academico")) {
    datos.setValue(n1,"Nivel de estudio","Pregrado");
    datos.setValue(n2,"Nivel de estudio","Postgrado");
    datos.setValue(n3,"Nivel de estudio","Primaria");
    datos.setValue(n4,"Nivel de estudio","Bachillerato");
    datos.setValue(n5,"Nivel de estudio","no indica");
    JFreeChart grafico_barras =ChartFactory.createBarChart3D(
        "Nivel de estudios de colombianos en el extrangero",
        "Nivel de estudio",
        "Cantidad de personas",
        datos,
        PlotOrientation.VERTICAL,
        true,
        true,
        false
        );
       ChartPanel panel = new ChartPanel(grafico_barras);
       panel.setMouseWheelEnabled(true);
       panel.setPreferredSize(new Dimension(400,200));
       
       jPanel1.setLayout(new BorderLayout());
       jPanel1.add(panel,BorderLayout.NORTH);
       pack();
       repaint();

} else if (filtro.equalsIgnoreCase("genero")) {
    datos.setValue(contmas,"Genero","Masculino");
    datos.setValue(contfem,"Genro","Femenino");
    JFreeChart grafico_barras =ChartFactory.createBarChart3D(
        "Genero de colombianos en el extranjero",
        "Genero",
        "Cantidad de personas",
        datos,
        PlotOrientation.VERTICAL,
        true,
        true,
        false
        );
       ChartPanel panel = new ChartPanel(grafico_barras);
       panel.setMouseWheelEnabled(true);
       panel.setPreferredSize(new Dimension(400,200));
       
       jPanel1.setLayout(new BorderLayout());
       jPanel1.add(panel,BorderLayout.NORTH);
       pack();
       repaint();

} else if (filtro.equalsIgnoreCase("pais")) {
    datos.setValue(contUSA,"Pais actual de vivienda","USA");
    datos.setValue(contESP,"Pais actual de vivienda","ESP");
    datos.setValue(contECU,"Pais actual de vivienda","ECU");
    datos.setValue(contCHL,"Pais actual de vivienda","CHL");
    datos.setValue(contCAN,"Pais actual de vivienda","CAN");
    datos.setValue(contARG,"Pais actual de vivienda","ARG");
    datos.setValue(contAUS,"Pais actual de vivienda","AUS");
    datos.setValue(contMEX,"Pais actual de vivienda","MEX");
    datos.setValue(contFRA,"Pais actual de vivienda","FRA");
    JFreeChart grafico_barras =ChartFactory.createBarChart3D(
        "Paises donde viven los colombianos en el extranjero",
        "Paises",
        "Cantidad de personas",
        datos,
        PlotOrientation.VERTICAL,
        true,
        true,
        false
        );
       ChartPanel panel = new ChartPanel(grafico_barras);
       panel.setMouseWheelEnabled(true);
       panel.setPreferredSize(new Dimension(400,200));
       
       jPanel1.setLayout(new BorderLayout());
       jPanel1.add(panel,BorderLayout.NORTH);
       pack();
       repaint();

} else if (filtro.equalsIgnoreCase("Grupo Edad")) {
    datos.setValue(contAdult,"rango edad","Adulto");
    datos.setValue(contAdultJ,"rango edad","Adulto joven");
    JFreeChart grafico_barras =ChartFactory.createBarChart3D(
        "Rango edad de colombianos en el extrangero",
        "Rango de edades ",
        "Cantidad de personas",
        datos,
        PlotOrientation.VERTICAL,
        true,
        true,
        false
        );
       ChartPanel panel = new ChartPanel(grafico_barras);
       panel.setMouseWheelEnabled(true);
       panel.setPreferredSize(new Dimension(400,200));
       
       jPanel1.setLayout(new BorderLayout());
       jPanel1.add(panel,BorderLayout.NORTH);
       pack();
       repaint();

}
  if (filtro.equalsIgnoreCase("nivel academico")) {
        System.out.println("Colombianos con nivel de Pregrado: " + contadorPregrado);
        System.out.println("Colombianos con nivel Postgrado: " + contadorPostgrado);
        System.out.println("Colombianos con nivel Primaria: " + contadorPrimaria);
        System.out.println("Colmbianos con nivel Bachillerato: " + contadorBachillerato);
        System.out.println("Colmbianos que no especifican su nivel academico: " + contadorNoIndica);
        
             
    }
    if (filtro.equalsIgnoreCase("genero")) {
     System.out.println("Colombianos del genero masculino en el extrangero: " + contmas);
     System.out.println("Colombianos del genero femenino en el extrangero : " + contfem);
    }
    
     if (filtro.equalsIgnoreCase("pais")) {
     System.out.println("Personas colombianas que viven en Estados Unidos: " + contUSA);
     System.out.println("Personas colombianas que viven en España: " + contESP);
     System.out.println("Personas colombianas que viven en Ecuador: " + contECU);
     System.out.println("Personas colombianas que viven en Chile: " + contCHL);
     System.out.println("Personas colombianas que viven en Canada: " + contCAN);
     System.out.println("Personas colombianas que viven en Argentina: " + contARG);
     System.out.println("Personas colombianas que viven en Australia: " + contAUS);
     System.out.println("Personas colombianas que viven en Mexico: " + contMEX);
     System.out.println("Personas colombianas que viven en Francia: " + contFRA);
     }
    
     if (filtro.equalsIgnoreCase("Grupo Edad")) {
     System.out.println("Cantidad de colombianos Adultos en el extrangero: " + contAdult);
     System.out.println("Cantidad de colombianos Adultos jovenes en el extrangero: " + contAdultJ);
    } 

}
     
 catch (Exception e) {
    e.printStackTrace();
}
    }//GEN-LAST:event_BarrasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Grafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Grafica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Barras;
    private javax.swing.JButton Generar;
    private javax.swing.JTextField filtro1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbuttoncargar;
    // End of variables declaration//GEN-END:variables
}
